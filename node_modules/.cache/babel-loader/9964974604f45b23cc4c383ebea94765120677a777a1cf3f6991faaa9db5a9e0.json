{"ast":null,"code":"var _jsxFileName = \"/Users/khursheedalam/Downloads/uber_app_react/src/components/Admin/AdminLoginScreen.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { Container, TextField, Button, Typography, Box } from '@mui/material';\nimport { useNavigate } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AdminLoginScreen = () => {\n  _s();\n  const navigate = useNavigate();\n  const [username, setUsername] = useState('');\n  const [password, setPassword] = useState('');\n  const [error, setError] = useState('');\n  const handleLogin = e => {\n    e.preventDefault();\n    if (username === 'admin' && password === 'admin123') {\n      navigate('/admin/dashboard');\n    } else {\n      setError('Invalid credentials');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(Container, {\n    maxWidth: \"sm\",\n    children: /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        mt: 8\n      },\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h4\",\n        children: \"Admin Login\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 9\n      }, this), error && /*#__PURE__*/_jsxDEV(Typography, {\n        color: \"error\",\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 19\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleLogin,\n        children: [/*#__PURE__*/_jsxDEV(TextField, {\n          fullWidth: true,\n          margin: \"normal\",\n          label: \"Username/Email\",\n          onChange: e => setUsername(e.target.value),\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 26,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(TextField, {\n          fullWidth: true,\n          margin: \"normal\",\n          label: \"Password\",\n          type: \"password\",\n          onChange: e => setPassword(e.target.value),\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 27,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"contained\",\n          type: \"submit\",\n          fullWidth: true,\n          sx: {\n            mt: 2\n          },\n          children: \"Login\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 28,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"body2\",\n        sx: {\n          mt: 2\n        },\n        children: \"Forgot Password?\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"caption\",\n        children: \"Note: MFA enabled\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 21,\n    columnNumber: 5\n  }, this);\n};\n_s(AdminLoginScreen, \"kjDC88WJiK7CUxjPoGFNy8xIEuA=\", false, function () {\n  return [useNavigate];\n});\n_c = AdminLoginScreen;\nexport default AdminLoginScreen;\nvar _c;\n$RefreshReg$(_c, \"AdminLoginScreen\");","map":{"version":3,"names":["React","useState","Container","TextField","Button","Typography","Box","useNavigate","jsxDEV","_jsxDEV","AdminLoginScreen","_s","navigate","username","setUsername","password","setPassword","error","setError","handleLogin","e","preventDefault","maxWidth","children","sx","mt","variant","fileName","_jsxFileName","lineNumber","columnNumber","color","onSubmit","fullWidth","margin","label","onChange","target","value","required","type","_c","$RefreshReg$"],"sources":["/Users/khursheedalam/Downloads/uber_app_react/src/components/Admin/AdminLoginScreen.js"],"sourcesContent":["import React, { useState } from 'react';\nimport { Container, TextField, Button, Typography, Box } from '@mui/material';\nimport { useNavigate } from 'react-router-dom';\n\nconst AdminLoginScreen = () => {\n  const navigate = useNavigate();\n  const [username, setUsername] = useState('');\n  const [password, setPassword] = useState('');\n  const [error, setError] = useState('');\n\n  const handleLogin = (e) => {\n    e.preventDefault();\n    if (username === 'admin' && password === 'admin123') {\n      navigate('/admin/dashboard');\n    } else {\n      setError('Invalid credentials');\n    }\n  };\n\n  return (\n    <Container maxWidth=\"sm\">\n      <Box sx={{ mt: 8 }}>\n        <Typography variant=\"h4\">Admin Login</Typography>\n        {error && <Typography color=\"error\">{error}</Typography>}\n        <form onSubmit={handleLogin}>\n          <TextField fullWidth margin=\"normal\" label=\"Username/Email\" onChange={e => setUsername(e.target.value)} required />\n          <TextField fullWidth margin=\"normal\" label=\"Password\" type=\"password\" onChange={e => setPassword(e.target.value)} required />\n          <Button variant=\"contained\" type=\"submit\" fullWidth sx={{ mt: 2 }}>Login</Button>\n        </form>\n        <Typography variant=\"body2\" sx={{ mt: 2 }}>Forgot Password?</Typography>\n        <Typography variant=\"caption\">Note: MFA enabled</Typography>\n      </Box>\n    </Container>\n  );\n};\n\nexport default AdminLoginScreen;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}